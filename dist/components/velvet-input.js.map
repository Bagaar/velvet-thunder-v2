{"version":3,"file":"velvet-input.js","sources":["../../src/components/velvet-input.hbs","../../src/components/velvet-input.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"<input\\n  class={{-velvet/class-list\\n    \\\"velvet-input\\\"\\n    (concat \\\"velvet-input-\\\" (or @size \\\"md\\\"))\\n    (concat \\\"velvet-input-\\\" (or @variant \\\"primary\\\"))\\n    (if @isInvalid \\\"velvet-input-invalid\\\")\\n    (if @isPill \\\"velvet-input-pill\\\")\\n    (if @isDisabled \\\"velvet-input-disabled\\\")\\n    \\\"form-input\\\"\\n  }}\\n  disabled={{@isDisabled}}\\n  placeholder={{@placeholder}}\\n  type={{or @type \\\"text\\\"}}\\n  value={{@value}}\\n  {{on \\\"change\\\" this.changeHandler}}\\n  {{on \\\"input\\\" this.inputHandler}}\\n  ...attributes\\n/>\")","import Component from \"@glimmer/component\";\n\ninterface VelvetInputSignature {\n  Args: {\n    /// Indicate if the input is disabled.\n    /// @default [false]\n    isDisabled?: boolean;\n    /// Indicate if the input is invalid.\n    /// @default [false]\n    isInvalid?: boolean;\n    /// Indicate if the input is pill shaped.\n    /// @default [false]\n    isPill?: boolean;\n    /// Handle the input's `change` event.\n    /// @default [undefined]\n    onChange?: (value: string, event: Event) => void;\n    /// Handle the input's `input` event.\n    /// @default [undefined]\n    onInput?: (value: string, event: Event) => void;\n    /// The placeholder of the input.\n    /// @default [\"\"]\n    placeholder?: string;\n    /// The size of the input.\n    /// @default [\"md\"]\n    size?: \"sm\" | \"md\" | \"lg\";\n    /// The type of the input.\n    /// @default [\"\"]\n    type?: string;\n    /// The value of the input.\n    /// @default [\"\"]\n    value?: string;\n    /// The appearance of the input.\n    /// @default [\"primary\"]\n    variant?: string | \"primary\";\n  };\n  Element: HTMLInputElement;\n}\n\nexport default class VelvetInput extends Component<VelvetInputSignature> {\n  changeHandler = (event: Event) => {\n    const { isDisabled, onChange } = this.args;\n\n    if (typeof onChange !== \"function\" || isDisabled === true) {\n      return;\n    }\n\n    onChange((event.target as HTMLInputElement).value, event);\n  };\n\n  inputHandler = (event: Event) => {\n    const { isDisabled, onInput } = this.args;\n\n    if (typeof onInput !== \"function\" || isDisabled === true) {\n      return;\n    }\n\n    onInput((event.target as HTMLInputElement).value, event);\n  };\n}\n"],"names":["VelvetInput","Component","constructor","args","_defineProperty","event","isDisabled","onChange","target","value","onInput","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,yhBAAyhB;;ACqC5iB,MAAMA,WAAW,SAASC,SAAS,CAAuB;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;IAAAC,eAAA,CAAA,IAAA,EAAA,eAAA,EACtDC,KAAY,IAAK;MAChC,MAAM;QAAEC,UAAU;AAAEC,QAAAA,QAAAA;OAAU,GAAG,IAAI,CAACJ,IAAI,CAAA;MAE1C,IAAI,OAAOI,QAAQ,KAAK,UAAU,IAAID,UAAU,KAAK,IAAI,EAAE;AACzD,QAAA,OAAA;AACF,OAAA;MAEAC,QAAQ,CAAEF,KAAK,CAACG,MAAM,CAAsBC,KAAK,EAAEJ,KAAK,CAAC,CAAA;KAC1D,CAAA,CAAA;IAAAD,eAAA,CAAA,IAAA,EAAA,cAAA,EAEeC,KAAY,IAAK;MAC/B,MAAM;QAAEC,UAAU;AAAEI,QAAAA,OAAAA;OAAS,GAAG,IAAI,CAACP,IAAI,CAAA;MAEzC,IAAI,OAAOO,OAAO,KAAK,UAAU,IAAIJ,UAAU,KAAK,IAAI,EAAE;AACxD,QAAA,OAAA;AACF,OAAA;MAEAI,OAAO,CAAEL,KAAK,CAACG,MAAM,CAAsBC,KAAK,EAAEJ,KAAK,CAAC,CAAA;KACzD,CAAA,CAAA;AAAA,GAAA;AACH,CAAA;AAACM,oBAAA,CAAAC,QAAA,EApBoBZ,WAAW,CAAA;;;;"}