{"version":3,"file":"velvet-radio.js","sources":["../../src/components/velvet-radio.hbs","../../src/components/velvet-radio.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"<label\\n  class={{-velvet/class-list\\n    \\\"velvet-radio\\\"\\n    (concat \\\"velvet-radio-\\\" (or @size \\\"md\\\"))\\n    (if @isDisabled \\\"velvet-radio-disabled\\\")\\n  }}\\n>\\n  <input\\n    checked={{this.isChecked}}\\n    class=\\\"velvet-radio-input form-radio\\\"\\n    disabled={{@isDisabled}}\\n    name={{@name}}\\n    type=\\\"radio\\\"\\n    value={{this.valueAttr}}\\n    {{on \\\"change\\\" this.changeHandler}}\\n    ...attributes\\n  />\\n  {{yield}}\\n</label>\")","import Component from \"@glimmer/component\";\n\nexport type Size = \"sm\" | \"md\" | \"lg\";\n\ninterface VelvetRadioSignature {\n  Args: {\n    /// Indicate if the radio is checked.\n    /// @default [false]\n    isChecked?: boolean;\n    /// Indicate if the radio is disabled.\n    /// @default [false]\n    isDisabled?: boolean;\n    /// The name of the radio.\n    /// @default [\"\"]\n    name?: string;\n    /// Handle the radio's `change` event.\n    /// @default [undefined]\n    onChange?: (isChecked: boolean, event: Event) => void;\n    /// The size of the radio.\n    /// @default [\"md\"]\n    size?: Size;\n    /// The value of the radio.\n    /// @default [undefined]\n    value?: unknown;\n\n    privateGroupValue?: unknown;\n    privateInGroup?: boolean;\n    privateOnChangeGroup?: (value: unknown, event: Event) => void;\n  };\n  Blocks: {\n    default: [];\n  };\n  Element: HTMLInputElement;\n}\n\nexport default class VelvetRadio extends Component<VelvetRadioSignature> {\n  get isChecked() {\n    const { privateInGroup, isChecked, privateGroupValue, value } = this.args;\n\n    return privateInGroup ? value === privateGroupValue : isChecked;\n  }\n\n  get valueAttr() {\n    const { value } = this.args;\n\n    return value === undefined ? undefined : String(value);\n  }\n\n  changeHandler = (event: Event) => {\n    if (this.args.isDisabled === true) {\n      return;\n    }\n\n    const { privateInGroup, onChange, privateOnChangeGroup, value } = this.args;\n\n    if (privateInGroup && typeof privateOnChangeGroup === \"function\") {\n      privateOnChangeGroup(value, event);\n    } else if (typeof onChange === \"function\") {\n      onChange((event.target as HTMLInputElement).checked, event);\n    }\n  };\n}\n"],"names":["VelvetRadio","Component","constructor","args","_defineProperty","event","isDisabled","privateInGroup","onChange","privateOnChangeGroup","value","target","checked","isChecked","privateGroupValue","valueAttr","undefined","String","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,4bAA4b;;ACkC/c,MAAMA,WAAW,SAASC,SAAS,CAAuB;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;IAAAC,eAAA,CAAA,IAAA,EAAA,eAAA,EAatDC,KAAY,IAAK;AAChC,MAAA,IAAI,IAAI,CAACF,IAAI,CAACG,UAAU,KAAK,IAAI,EAAE;AACjC,QAAA,OAAA;AACF,OAAA;MAEA,MAAM;QAAEC,cAAc;QAAEC,QAAQ;QAAEC,oBAAoB;AAAEC,QAAAA,KAAAA;OAAO,GAAG,IAAI,CAACP,IAAI,CAAA;AAE3E,MAAA,IAAII,cAAc,IAAI,OAAOE,oBAAoB,KAAK,UAAU,EAAE;AAChEA,QAAAA,oBAAoB,CAACC,KAAK,EAAEL,KAAK,CAAC,CAAA;AACpC,OAAC,MAAM,IAAI,OAAOG,QAAQ,KAAK,UAAU,EAAE;QACzCA,QAAQ,CAAEH,KAAK,CAACM,MAAM,CAAsBC,OAAO,EAAEP,KAAK,CAAC,CAAA;AAC7D,OAAA;KACD,CAAA,CAAA;AAAA,GAAA;EAxBD,IAAIQ,SAASA,GAAG;IACd,MAAM;MAAEN,cAAc;MAAEM,SAAS;MAAEC,iBAAiB;AAAEJ,MAAAA,KAAAA;KAAO,GAAG,IAAI,CAACP,IAAI,CAAA;AAEzE,IAAA,OAAOI,cAAc,GAAGG,KAAK,KAAKI,iBAAiB,GAAGD,SAAS,CAAA;AACjE,GAAA;EAEA,IAAIE,SAASA,GAAG;IACd,MAAM;AAAEL,MAAAA,KAAAA;KAAO,GAAG,IAAI,CAACP,IAAI,CAAA;IAE3B,OAAOO,KAAK,KAAKM,SAAS,GAAGA,SAAS,GAAGC,MAAM,CAACP,KAAK,CAAC,CAAA;AACxD,GAAA;AAeF,CAAA;AAACQ,oBAAA,CAAAC,QAAA,EA1BoBnB,WAAW,CAAA;;;;"}