{"version":3,"file":"velvet-button.js","sources":["../../src/components/velvet-button.hbs","../../src/components/velvet-button.ts"],"sourcesContent":["import { precompileTemplate } from \"@ember/template-compilation\";\nexport default precompileTemplate(\"{{#let\\n  (-velvet/class-list\\n    \\\"velvet-button\\\"\\n    (concat \\\"velvet-button-\\\" (or @size \\\"md\\\"))\\n    (concat \\\"velvet-button-\\\" (or @variant \\\"primary\\\"))\\n    (if @isPill \\\"velvet-button-pill\\\")\\n    (if @isDisabled \\\"velvet-button-disabled\\\")\\n  )\\n  as |className|\\n}}\\n  {{#if @isRenderless}}\\n    {{yield (hash class=className)}}\\n  {{else}}\\n    <button\\n      class={{className}}\\n      disabled={{@isDisabled}}\\n      type={{or @type \\\"button\\\"}}\\n      {{on \\\"click\\\" this.clickHandler}}\\n      {{@privateDropdownTrigger}}\\n      ...attributes\\n    >\\n      {{#if @isLoading}}\\n        <VelvetSpinner />\\n      {{/if}}\\n      {{yield (hash class=className)}}\\n      {{#if @isDisclosure}}\\n        <VelvetDisclosureIcon class=\\\"velvet-button-disclosure-icon\\\" />\\n      {{/if}}\\n    </button>\\n  {{/if}}\\n{{/let}}\")","import Component from \"@glimmer/component\";\nimport type { ModifierLike } from \"@glint/template\";\nimport type { TriggerSignature } from \"./velvet-dropdown.ts\";\n\ninterface VelvetButtonSignature {\n  Args: {\n    /// Indicate if the button is disabled.\n    /// @default [false]\n    isDisabled?: boolean;\n    /// Indicate if the button discloses content.\n    /// @default [false]\n    isDisclosure?: boolean;\n    /// Indicate if the button should display a loading state.\n    /// @default [false]\n    isLoading?: boolean;\n    /// Indicate if the button is pill shaped.\n    /// @default [false]\n    isPill?: boolean;\n    /// Make the button renderless.\n    /// @default [false]\n    isRenderless?: boolean;\n    /// Handle the button's `click` event.\n    /// @default [undefined]\n    onClick?: (event: MouseEvent) => void;\n    /// The size of the button.\n    /// @default [\"md\"]\n    size?: \"xs\" | \"sm\" | \"md\" | \"lg\";\n    /// The type of the button.\n    /// @default [\"button\"]\n    type?: \"button\" | \"reset\" | \"submit\";\n    /// The appearance of the button.\n    /// @default [\"primary\"]\n    variant?: string | \"primary\";\n\n    privateDropdownTrigger?: ModifierLike<TriggerSignature>;\n  };\n  Blocks: {\n    default: [{ class: string }];\n  };\n  Element: HTMLButtonElement;\n}\n\nexport default class VelvetButton extends Component<VelvetButtonSignature> {\n  clickHandler = (event: MouseEvent) => {\n    const { isDisabled, onClick } = this.args;\n\n    if (typeof onClick !== \"function\" || isDisabled === true) {\n      return;\n    }\n\n    onClick(event);\n  };\n}\n"],"names":["VelvetButton","Component","constructor","args","_defineProperty","event","isDisabled","onClick","setComponentTemplate","TEMPLATE"],"mappings":";;;;;AACA,eAAe,kBAAkB,CAAC,+zBAA+zB;;ACyCl1B,MAAMA,YAAY,SAASC,SAAS,CAAwB;AAAAC,EAAAA,WAAAA,CAAA,GAAAC,IAAA,EAAA;AAAA,IAAA,KAAA,CAAA,GAAAA,IAAA,CAAA,CAAA;IAAAC,eAAA,CAAA,IAAA,EAAA,cAAA,EACzDC,KAAiB,IAAK;MACpC,MAAM;QAAEC,UAAU;AAAEC,QAAAA,OAAAA;OAAS,GAAG,IAAI,CAACJ,IAAI,CAAA;MAEzC,IAAI,OAAOI,OAAO,KAAK,UAAU,IAAID,UAAU,KAAK,IAAI,EAAE;AACxD,QAAA,OAAA;AACF,OAAA;MAEAC,OAAO,CAACF,KAAK,CAAC,CAAA;KACf,CAAA,CAAA;AAAA,GAAA;AACH,CAAA;AAACG,oBAAA,CAAAC,QAAA,EAVoBT,YAAY,CAAA;;;;"}